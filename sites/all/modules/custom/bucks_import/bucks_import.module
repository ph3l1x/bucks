<?php

function bucks_import_menu() {
    $items['admin/config/system/product_import'] = array(
        'title' => 'Bucks Custom Product Import Script',
        'description' => 'Custom Script to import products into Bucks 4X4 Website',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bucks_import_form'),
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
    );
  $items['admin/config/system/products_delete'] = array(
    'title' => 'Bucks Delete All Products',
    'description' => 'Delete All Products from Bucks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bucks_delete_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
    $items['api/categories'] = array(
        'page callback' => 'category_api',
        'access arguments' => array('access content'),
        'page arguments' => array('category_api'),
        'delivery callback' => 'drupal_json_output',
        'type' => MENU_CALLBACK
    );
//    $items['product_category/%'] = array(
//        'title' => 'Products',
//        'description' => 'Custom Products Search',
//        'access arguments' => array('access content'),
//        'page arguments' => array(1),
//        'access callback' => TRUE,
//        'page callback' => array('product_page'),
//        'type' => MENU_NORMAL_ITEM
//    );
    return $items;
}

function category_api() {
  drupal_add_http_header('Content-Type', 'application/json');
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  drupal_add_http_header('Access-Control-Allow-Methods', 'GET');
  drupal_add_http_header('Vary', 'Cookie,fastly-ssl', TRUE);
  http_response_code(200);
    $terms = taxonomy_get_tree('12');
    $termData = array();
    foreach ($terms as $k => $term) {
        $termData[$k]['name'] = $term->name;
        $termData[$k]['tid'] = $term->tid;
    }

    return $terms;
}
function node_exists($sku) {
    $node = db_select('field_data_field_sku', 'eid')
        ->fields('eid', array('entity_id'))
        ->condition('field_sku_value', $sku)
        ->execute()
        ->fetchAssoc();

    return $node['entity_id'];
}
function product_exist($sku) {
    $product = db_select('commerce_product', 'cp')
        ->fields('cp', array('product_id'))
        ->condition('sku', $sku)
        ->execute()
        ->fetchAssoc();

    if ($product['product_id']) {
        return $product['product_id'];
    } else {
        return false;
    }
}
function get_image($image_url, $file_url) {
    if($image_url) {
        $image_name = pathinfo($image_url)['basename'];
        @$file_temp = file_get_contents($image_url);
        if ($file_temp) {
            $file_temp = file_save_data($file_temp, 'public://product_images/' . $image_name, FILE_EXISTS_RENAME);
            return $file_temp;
        } else {
            return false;
        }
    }
    if($file_url) {
        $file_name = pathinfo($file_url)['basename'];
        @$file_temp = file_get_contents($file_url);
        if($file_temp) {
            $file_temp = file_save_data($file_temp, 'public://product_files/' . $file_name, FILE_EXISTS_RENAME);
            return $file_temp;
        } else {
            return false;
        }
    }
}
function taxonomy_create_year($termName, $vid, $parent) {

    $query = new EntityFieldQuery;
    $result = $query
        ->entityCondition('entity_type','taxonomy_term')
        ->propertyCondition('name', $termName)
        ->propertyCondition('vid', $vid)
        ->execute();

    @$tid = array_shift($result['taxonomy_term'])->tid;

    if($tid) {
        $yearInfo = taxonomy_get_tree($vid, $parent, NULL);
        foreach ($yearInfo as $value) {
            if ($value->name == $termName) {
                $tax = taxonomy_term_load($value->tid);
                break;
            }
        }
    }
    if(!isset($tax)) {
        if (is_null($tax)) {

            $term = new stdClass();
            $term->name = $termName;
            $term->vid = $vid;
            if ($parent) {
                $term->parent = $parent;
            }
            taxonomy_term_save($term);
            return $term;
        } else {
            return $tax;
        }
    }
    return $tax;
}
function taxonomy_create($termName, $vid, $parent) {

//    $tid = key(taxonomy_get_term_by_name($termName, $vid));
//    $tid = taxonomy_get_term_by_name($termName, $vid);
    $query = new EntityFieldQuery;
    $result = $query
        ->entityCondition('entity_type','taxonomy_term')
        ->propertyCondition('name', $termName)
        ->propertyCondition('vid', $vid)
        ->execute();

    @$tid = array_shift($result['taxonomy_term'])->tid;

    if ($tid) {
        $tax = taxonomy_term_load($tid);
        $tax->exists = '1';
        return $tax;

    } else {
        $term = new stdClass();
        $term->name = $termName;
        $term->vid = $vid;
        if ($parent) {
            $term->parent = $parent;
        }
        taxonomy_term_save($term);
        return $term;
    }
}
function bucks_import_form($node, &$form_state) {

    $form = array('#attributes' => array('enctype' => "multipart/form-data"));

    $form['file'] = array(
        '#type' => 'managed_file',
        '#title' => 'Upload your excel spreadsheet here.',
        '#required' => TRUE,
        '#upload_location' => 'public://xlsFiles',
        '#upload_validators' => array(
            'file_validate_extensions' => array('xls xlsx')
        )
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Upload and Process')
    );

    return $form;
}

function bucks_delete_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete All Bucks Products')
  );
  return $form;
}
function bucks_delete_form_submit($form, &$form_state) {
  $product_ids = db_select('commerce_product', 'p')->fields('p', array('product_id'))->execute()->fetchCol();
  $node_ids = db_select('node', 'p')->fields('p', array('nid'))->condition('p.type', 'product_node_page')->execute()->fetchCol();
  commerce_product_delete_multiple($product_ids);
  node_delete_multiple($node_ids);
}
function bucks_import_form_submit($form, &$form_state)
{

    global $user;
    require_once dirname(__FILE__) . '/classes/PHPExcel/IOFactory.php';

    /* Upload file and move to correct folder */
    $file = file_load($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    $inputFileName = drupal_realpath($file->uri);
    file_save($file);
    file_usage_add($file, 'bucks_import', 'bucks_import', $file->fid);

    try {
        $inputFileType = PHPExcel_IOFactory::identify($inputFileName);
        $objReader = PHPExcel_IOFactory::createReader($inputFileType);
        $objPHPExcel = $objReader->load($inputFileName);
    } catch (Exception $e) {
        die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME) . '": ' . $e->getMessage());
    }

    $sheet = $objPHPExcel->getSheet(0);
    $highestRow = $sheet->getHighestRow();
    $highestColumn = $sheet->getHighestColumn();

    /***********************************
     ******* DELETE ALL PRODUCTS *******
     ***********************************/
//    $product_ids = db_select('commerce_product', 'p')->fields('p', array('product_id'))->execute()->fetchCol();
//    $node_ids = db_select('node', 'p')->fields('p', array('nid'))->condition('p.type', 'product_node_page')->execute()->fetchCol();
//    commerce_product_delete_multiple($product_ids);
//    node_delete_multiple($node_ids);
    /** Delete Products END **/

    for ($row = 1; $row <= $highestRow; $row++) {
        $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);
        if ($row == 1) {
            continue;
        }
        /* Determine if this product already exists from SKU */
        if (!product_exist($rowData[0][1])) {


            /* Create Commerce Product */
            $product = commerce_product_new('product');
            $product->language = LANGUAGE_NONE;

            $node = new stdClass();
            $node->type = 'product_node_page';
            node_object_prepare($node);

            if ($rowData[0][1]) {
                $product->sku = $rowData[0][1];
                $node->field_sku['und'][0]['value'] = $rowData[0][1];
            }
            if ($user->uid) {
                $product->uid = $user->uid;
                $node->uid = $user->uid;
            }
            if ($rowData[0][3]) {
                $product->title = substr($rowData[0][3], 0, 200);
                $node->title = substr($rowData[0][3], 0, 200);
            }
            if ($rowData[0][7]) {
                $product->commerce_price['und'][0] = array(
                    'amount' => $rowData[0][7] * 100,
                    'currency_code' => "USD"
                );
                $node->field_price['und'][0] = array(
                    'amount' => $rowData[0][7] * 100,
                    'currency_code' => "USD"
                );
            }
            if ($rowData[0][9]) {
                $product->field_sale_price['und'][0] = array(
                    'amount' => $rowData[0][9] * 100,
                    'currency_code' => "USD"
                );
                $node->field_sale_price['und'][0] = array(
                    'amount' => $rowData[0][9] * 100,
                    'currency_code' => "USD"
                );
            }
            if ($rowData[0][5]) {
                $product->field_cost['und'][0] = array(
                    'amount' => $rowData[0][5] * 100,
                    'currency_code' => "USD"
                );
                $node->field_cost['und'][0] = array(
                    'amount' => $rowData[0][5] * 100,
                    'currency_code' => "USD"
                );
            }
            if ($rowData[0][8]) {
                $product->field_retail_price['und'][0] = array(
                    'amount' => $rowData[0][8] * 100,
                    'currency_code' => "USD"
                );
                $node->field_retail_price['und'][0] = array(
                    'amount' => $rowData[0][8] * 100,
                    'currency_code' => "USD"
                );
            }
            if ($rowData[0][2]) {
                $product->field_upc['und'][0]['value'] = $rowData[0][2];
                $node->field_upc['und'][0]['value'] = $rowData[0][2];
            }
            if ($rowData[0][0]) {
                $product->field_brand['und'][0]['tid'] = taxonomy_create($rowData[0][0], 11, NULL)->tid;
                $node->field_brand['und'][0]['tid'] = taxonomy_create($rowData[0][0], 11, NULL)->tid;
            }
            if ($rowData[0][15]) {
                $product->field_item_condition['und'][0]['tid'] = taxonomy_create($rowData[0][15], 2, NULL)->tid;
                $node->field_item_condition['und'][0]['tid'] = taxonomy_create($rowData[0][15], 2, NULL)->tid;
            }
            if ($rowData[0][16]) {
                $product->field_quantity['und'][0]['value'] = $rowData[0][16];
                $node->field_quantity['und'][0]['value'] = $rowData[0][16];
            }
            if ($rowData[0][4]) {
                $product->field_long_description['und'][0]['value'] = $rowData[0][4];
                $node->field_long_description['und'][0]['value'] = $rowData[0][4];
            }
            if ($rowData[0][6]) {
                $product->field_jober['und'][0]['value'] = $rowData[0][6];
                $node->field_jober['und'][0]['value'] = $rowData[0][6];
            }
            if ($rowData[0][30]) {
                $product->field_bed_length['und'][0]['value'] = $rowData[0][30];
                $node->field_bed_length['und'][0]['value'] = $rowData[0][30];
            }
            if ($rowData[0][24]) {
                $product->field_fitment['und'][0]['value'] = $rowData[0][24];
                $node->field_fitment['und'][0]['value'] = $rowData[0][24];
            }
            if ($rowData[0][14]) {
                $product->field_oversize['und'][0]['value'] = '1';
                $node->field_oversize['und'][0]['value'] = '1';
            }
            if ($rowData[0][10]) {
                $product->field_length['und'][0]['value'] = $rowData[0][10];
                $node->field_length['und'][0]['value'] = $rowData[0][10];
            }
            if ($rowData[0][11]) {
                $product->field_height['und'][0]['value'] = $rowData[0][11];
                $node->field_height['und'][0]['value'] = $rowData[0][11];
            }
            if ($rowData[0][12]) {
                $product->field_width['und'][0]['value'] = $rowData[0][12];
                $node->field_width['und'][0]['value'] = $rowData[0][12];
            }
            if ($rowData[0][13]) {
                $product->field_weight['und'][0]['value'] = $rowData[0][13];
                $node->field_weight['und'][0]['value'] = $rowData[0][13];
            }

            /* Multi Taxonomy Fields */
            if ($rowData[0][28]) {
                $doorsTax = taxonomy_create($rowData[0][28], 8, NULL)->tid;
                $product->field_doors['und'][]['tid'] = $doorsTax;
                $node->field_doors['und'][]['tid'] = $doorsTax;

//                $doors_field = explode('|', $rowData[0][28]);
//                if (is_array($doors_field)) {
//                    foreach ($doors_field as $key => $value) {
//                        $doorsTax = taxonomy_create($value, 8, NULL)->tid;
//                        $product->field_doors['und'][$key]['tid'] = $doorsTax;
//                        $node->field_doors['und'][$key]['tid'] = $doorsTax;
//                    }
//                }
            }
            if ($rowData[0][29]) {
                $engineTax = taxonomy_create($rowData[0][29], 9, NULL)->tid;
                $product->field_engine['und'][]['tid'] = $engineTax;
                $node->field_engine['und'][]['tid'] = $engineTax;
                $engine_field = explode('|', $rowData[0][29]);
//                if (is_array($engine_field)) {
//                    foreach ($engine_field as $key => $value) {
//                        $engineTax = taxonomy_create($value, 9, NULL)->tid;
//                        $product->field_engine['und'][$key]['tid'] = $engineTax;
//                        $node->field_engine['und'][$key]['tid'] = $engineTax;
//                    }
//                }
            }
            /* IMAGES */
            if ($rowData[0][17]) {
                $main_image = get_image($rowData[0][17], NULL);
                if ($main_image) {
                    $product->field_main_image['und'][0] = (array)$main_image;
                    $node->field_main_image['und'][0] = (array)$main_image;
                }
            }
            if ($rowData[0][18]) {
                $image1 = get_image($rowData[0][18], NULL);
                if ($image1) {
                    $product->field_additional_images['und'][0] = (array)$image1;
                    $node->field_additional_images['und'][0] = (array)$image1;
                }
            }
            if ($rowData[0][19]) {
                $image2 = get_image($rowData[0][19], NULL);
                if ($image2) {
                    $product->field_additional_images['und'][1] = (array)$image2;
                    $node->field_additional_images['und'][1] = (array)$image2;
                }
            }
            if ($rowData[0][20]) {
                $image3 = get_image($rowData[0][20], NULL);
                if ($image3) {
                    $product->field_additional_images['und'][2] = (array)$image3;
                    $node->field_additional_images['und'][2] = (array)$image3;
                }
            }
            if ($rowData[0][21]) {
                $image4 = get_image($rowData[0][21], NULL);
                if ($image4) {
                    $product->field_additional_images['und'][3] = (array)$image4;
                    $node->field_additional_images['und'][3] = (array)$image4;
                }
            }
            if ($rowData[0][22]) {
                $image5 = get_image($rowData[0][22], NULL);
                if ($image5) {
                    $product->field_additional_images['und'][4] = (array)$image5;
                    $node->field_additional_images['und'][4] = (array)$image5;
                }
            }
            if ($rowData[0][23]) {
                $file = get_image(NULL, $rowData[0][23]);
                if ($file) {
                    $product->field_pdf_file['und'][5] = array (
                        'fid' => $file->fid,
                        'display' => 1,
                        'descrption' => ''
                        );
                    $node->field_pdf_file['und'][5] = array (
                        'fid' => $file->fid,
                        'display' => 1,
                        'descrption' => ''
                    );
                }
            }
            /* Create Categories */
            if ($rowData[0][31]) {
                $catParent = taxonomy_create($rowData[0][31], '12', NULL);
                $catTid = $catParent;
            };
            if ($rowData[0][32]) {
                $cat1 = taxonomy_create($rowData[0][32], '12', $catParent->tid);
                $catTid = $cat1;
            };
            if ($rowData[0][33]) {
                $cat2 = taxonomy_create($rowData[0][33], '12', $cat1->tid);
                $catTid = $cat2;
            };
            if ($rowData[0][34]) {
                $cat3 = taxonomy_create($rowData[0][34], '12', $cat2->tid);
                $catTid = $cat3;
            };
            if ($rowData[0][35]) {
                $cat4 = taxonomy_create($rowData[0][35], '12', $cat3->tid);
                $catTid = $cat4;
            };
            if ($rowData[0][36]) {
                $cat5 = taxonomy_create($rowData[0][36], '12', $cat4->tid);
                $catTid = $cat5;
            }
            if ($rowData[0][37]) {
                $cat6 = taxonomy_create($rowData[0][37], '12', $cat5->tid);
                $catTid = $cat6;
            };
            if ($rowData[0][38]) {
                $cat7 = taxonomy_create($rowData[0][38], '12', $cat6->tid);
                $catTid = $cat7;
            };
            if ($rowData[0][39]) {
                $cat8 = taxonomy_create($rowData[0][39], '12', $cat7->tid);
                $catTid = $cat8;
            };
            if ($rowData[0][40]) {
                $cat9 = taxonomy_create($rowData[0][40], '12', $cat8->tid);
                $catTid = $cat9;
            };
            if ($rowData[0][41]) {
                $cat10 = taxonomy_create($rowData[0][41], '12', $cat9->tid);
                $catTid = $cat10;
            };
            if(isset($catTid->tid)) {
                $product->field_category['und'][0]['tid'] = $catTid->tid;
                $node->field_category['und'][0]['tid'] = $catTid->tid;
            }

            /* Create Year - Make - Model */

            if($rowData[0][25]) {
                $mmyParent = taxonomy_create($rowData[0][25], '29', NULL);
//                $mmyTid = $mmyParent;
            }
            if($rowData[0][26]) {
                $model = taxonomy_create($rowData[0][26], '29', $mmyParent->tid);
//                $mmyTid = $model;
            }
            if($rowData[0][27]) {
                $theYears = explode('|', $rowData[0][27]);
                foreach($theYears as $value) {
                    $year = taxonomy_create_year($value, '29', $model->tid);
                    $mmyTid = $year;
                    var_dump($mmyTid);
                    if(isset($mmyTid)) {
                        $product->field_make_model_year['und'][]['tid'] = $mmyTid->tid;
                        $node->field_make_model_year['und'][]['tid'] = $mmyTid->tid;
                    }
                }
            }

            commerce_product_save($product);
            $node->field_product_reference['und'][0]['product_id'] = $product->product_id;
            node_save($node);

            drupal_set_message("Created - SKU: " . $rowData[0][1] . ' - PRODUCT: ' . $rowData[0][3] . ' - Reference Product ID: ' . $product->product_id);

        } else {

            $nodeID = node_exists($rowData[0][1]);
            $productID = product_exist($rowData[0][1]);

            $node = node_load($nodeID);
            $product = commerce_product_load($productID);

            /* Create Year - Make - Model */

            if($rowData[0][25]) {
                $mmyParent = taxonomy_create($rowData[0][25], '29', NULL);
//                $mmyTid = $mmyParent;
            }
            if($rowData[0][26]) {
                $model = taxonomy_create($rowData[0][26], '29', $mmyParent->tid);
//                $mmyTid = $model;
            }
            if($rowData[0][27]) {
                $theYears = explode('|', $rowData[0][27]);
                foreach($theYears as $value) {
                    $year = taxonomy_create_year($value, '29', $model->tid);
                    $mmyTid = $year;
                    if(isset($mmyTid)) {
                        $product->field_make_model_year['und'][]['tid'] = $mmyTid->tid;
                        $node->field_make_model_year['und'][]['tid'] = $mmyTid->tid;
                    }
                }
            }
            commerce_product_save($product);
            $node->field_product_reference['und'][0]['product_id'] = $product->product_id;
            node_save($node);
            drupal_set_message("Product Already Exists - SKU: " . $rowData[0][1] . ' - PRODUCT: ' . $rowData[0][3], 'warning');
        }
    }
}
